setupAws: &setupAws
  name: Set up AWS credentials
  command: |
    mkdir -p ~/.aws
    echo -e "[default]\nregion = us-east-1" > ~/.aws/config
    echo [default] > ~/.aws/credentials
    echo aws_access_key_id=$AWS_ACCESS_KEY_ID_NONPROD >> ~/.aws/credentials
    echo aws_secret_access_key=$AWS_SECRET_ACCESS_KEY_NONPROD >> ~/.aws/credentials
    echo [prod] >> ~/.aws/credentials
    echo aws_access_key_id=$AWS_ACCESS_KEY_ID_PROD >> ~/.aws/credentials
    echo aws_secret_access_key=$AWS_SECRET_ACCESS_KEY_PROD >> ~/.aws/credentials

setupEnv: &setupEnv
  name: Set up deployment environment
  command: |
    echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $BASH_ENV
    echo "export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $BASH_ENV
    echo "export AWS_DEFAULT_REGION=us-east-1" >> $BASH_ENV
    echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $BASH_ENV
    echo "export CIRCLE_PROJECT_REPONAME=$CIRCLE_PROJECT_REPONAME" >> $BASH_ENV
    echo "export CONVOX_ORGANIZATION=$CONVOX_ORGANIZATION" >> $BASH_ENV
    echo "export CONVOX_PASSWORD=$CONVOX_PASSWORD" >> $BASH_ENV
    echo "export CONVOX_RACK=$CONVOX_RACK" >> $BASH_ENV
    echo "export PHOTO_BUCKET=$PHOTO_BUCKET" >> $BASH_ENV
    echo "export POSTGRES_INSTANCE_CLASS=$POSTGRES_INSTANCE_CLASS" >> $BASH_ENV
    echo "export POSTGRES_STORAGE_SIZE=$POSTGRES_STORAGE_SIZE" >> $BASH_ENV
    echo "export POSTGRES_VERSION=$POSTGRES_VERSION" >> $BASH_ENV
    echo "export STAGE=$STAGE" >> $BASH_ENV
    echo "export PATH=~/.local/bin:$PATH" >> $BASH_ENV

installPython: &installPython
  name: Install python3 and pip3
  command: |
    sudo apt -qq update
    sudo apt -qq install python3-pip

installAwsCli: &installAwsCli
  name: Install awscli
  command: |
    pip3 install awscli --upgrade --user

cloudformationDeploy: &cloudformationDeploy
  name: Deploy resources via cloudformation
  command: |
    STACK_NAME="$STAGE-photo-resources"
    echo "Updating cloudformation stack $STACK_NAME"
    aws cloudformation deploy \
        --template-file cloudformation.yml \
        --stack-name "$STACK_NAME" \
        --capabilities CAPABILITY_NAMED_IAM \
        --no-fail-on-empty-changeset \
        --parameter-overrides \
            StageParam=$STAGE

setConvoxEnv: &setConvoxEnv
  name: Attach the IAM policy to convox app
  command: |
    convox login console.convox.com -p "$CONVOX_PASSWORD"
    convox switch "$CONVOX_ORGANIZATION/$CONVOX_RACK"
    convox env set --app $STAGE-photo \
                   AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
                   AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
                   AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION \
                   PHOTO_BUCKET=$PHOTO_BUCKET \
                   POSTGRES_INSTANCE_CLASS=$POSTGRES_INSTANCE_CLASS \
                   POSTGRES_STORAGE_SIZE=$POSTGRES_STORAGE_SIZE \
                   POSTGRES_VERSION=$POSTGRES_VERSION

    SET_POLICY=$(convox apps params set --app $STAGE-photo \
                     IamPolicy=arn:aws:iam::$AWS_ACCOUNT_ID:policy/$STAGE-photo 2>&1) \
                     || EXIT_CODE=$? && true
    echo $SET_POLICY

deploySteps: &deploySteps
  steps:
    - run: *setupAws
    - run: *setupEnv
    - run: *installPython
    - run: *installAwsCli
    - checkout
    - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
        key: photo-{{ checksum "pom.xml" }}
    - run: mvn dependency:go-offline # gets the project dependencies
    - save_cache: # saves the project dependencies
        paths:
          - ~/.m2
        key: photo-{{ checksum "pom.xml" }}
    - run: mvn package # run the actual tests
    - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard. 
      # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
        path: backend/target/surefire-reports
    - store_artifacts: # store the uberjar as an artifact
      # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
        path: backend/target/backend-0.0.1-SNAPSHOT.jar
    - run: *cloudformationDeploy
    - run: *setConvoxEnv
    - convox/deploy

version: 2.1
orbs:
  convox: convox/orb@1.4.1

jobs:

  prodDeploy:
    executor: convox/cli
    working_directory: ~/photo
    docker:
      - image: circleci/openjdk:8-jdk-stretch
    environment:
      - STAGE: "prod"
      - CONVOX_PASSWORD: $CONVOX_API_KEY
      - CONVOX_ORGANIZATION: "ethanaa"
      - CONVOX_RACK: "prod-photo"
      - CIRCLE_PROJECT_REPONAME: "prod-photo" # corresponds with the convox app name (used by convox orb)
      - PHOTO_BUCKET: "prod-agvphoto-photos"
      - AWS_ACCOUNT_ID: "874200098474"
      - AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_PROD
      - AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_PROD
      - POSTGRES_INSTANCE_CLASS: "db.t3.small"
      - POSTGRES_STORAGE_SIZE: 50
      - POSTGRES_VERSION: 11
    <<: *deploySteps

workflows:

  release:
    jobs:
      - prodDeploy:
          filters:
            branches:
              only: release
